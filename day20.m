SAMPLE = 1;
dat = importdata("day20.dat");
dat = strrep(dat,"#","1");
dat = strrep(dat,".","0");
keys = "";
map = "";
if (SAMPLE)
	for i = 1:7
		keys = [keys,dat{i}];
	end
	for i = 8:12
		map = [map;dat{i}];
	end
end
keys = double(keys)-48;
map = double(map)-48;

function output = pad_matrix(input)
	HEIGHT = size(input)(1);
	output = zeros(1,HEIGHT);
	output = [output;input;output];
	output = [zeros(HEIGHT+2,1),output,zeros(HEIGHT+2,1)];
end

% part 1
pad1 = pad_matrix(map);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
new = pad1;
pad2 = pad_matrix(pad1);
HEIGHT = size(pad2)(1);
for i1 = 1:length(pad1(:))
	i2 = i1+HEIGHT+1;
	key = [pad2(i2-HEIGHT-1),pad2(i2-1),pad2(i2+HEIGHT-1),pad2(i2-HEIGHT),pad2(i2),pad2(i2+HEIGHT),pad2(i2-HEIGHT+1),pad2(i2+1),pad2(i2+HEIGHT+1)];
	key = bin2dec(num2str(key));
	new(i1) = keys(key+1);
end
assert(sum(new(:))==24);
pad1 = pad_matrix(new);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
pad1 = pad_matrix(pad1);
new = pad1;
pad2 = pad_matrix(pad1);
HEIGHT = size(pad2)(1);
for i1 = 1:length(pad1(:))
	i2 = i1+HEIGHT+1;
	key = [pad2(i2-HEIGHT-1),pad2(i2-1),pad2(i2+HEIGHT-1),pad2(i2-HEIGHT),pad2(i2),pad2(i2+HEIGHT),pad2(i2-HEIGHT+1),pad2(i2+1),pad2(i2+HEIGHT+1)];
	key = bin2dec(num2str(key));
	new(i1) = keys(key+1);
end
assert(sum(new(:))==35);

% part 2
res1 = 0;
res2 = 0;

% test
assert(res1==0);
assert(res2==0);
